// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StudentStatusEnum {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Student {
  id          String            @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  email       String            @unique
  password    String
  level       LevelEnum
  subjects    SubjectEnum[]
  status      StudentStatusEnum @default(ACTIVE)
  parents     Parent[]
  school      String
  phoneNumber String

  centre   Centre @relation(fields: [centreId], references: [id])
  centreId String @db.Uuid

  whitelistItem   WhitelistItem @relation(fields: [whitelistItemId], references: [id])
  whitelistItemId String        @unique @db.Uuid

  notificationPreference NotificationPreference?

  transaction Transaction[]

  sessions Session[]
  quizzes  Quiz[]
  takes    Take[]

  attendances Attendance[]
}

model Parent {
  id          String   @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  phoneNumber String
  Student     Student? @relation(fields: [studentId], references: [id])
  studentId   String?  @db.Uuid
}

enum AdminTypeEnum {
  STANDARD_ADMIN
  SUPER_ADMIN
}

model Admin {
  id        String        @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String        @unique
  password  String
  type      AdminTypeEnum @default(STANDARD_ADMIN)

  whitelistItem   WhitelistItem @relation(fields: [whitelistItemId], references: [id])
  whitelistItemId String        @unique @db.Uuid
}

enum SubjectEnum {
  MATHEMATICS
  ENGLISH
  SCIENCE
}

enum LevelEnum {
  P1
  P2
  P3
  P4
  P5
  P6
  S1
  S2
  S3
  S4
  S5
  J1
  J2
}

model Teacher {
  id        String        @id @default(uuid()) @db.Uuid
  email     String        @unique
  firstName String
  lastName  String
  password  String
  levels    LevelEnum[]
  subjects  SubjectEnum[]
  centre    Centre        @relation(fields: [centreId], references: [id])
  centreId  String        @db.Uuid
  // sessions Session[]
  // announcements Announcement[]
  // assignments Assignment[]
  quizzes   Quiz[]

  whitelistItem   WhitelistItem @relation(fields: [whitelistItemId], references: [id])
  whitelistItemId String        @unique @db.Uuid

  sessions Session[]
}

model NotificationPreference {
  id             String        @id @default(uuid()) @db.Uuid
  isUnsubscribed Boolean
  subjectsPref   SubjectEnum[]
  levelsPref     LevelEnum[]
  teacherPref    String[]
  centrePref     String[]

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique @db.Uuid
}

model Centre {
  id         String      @id @default(uuid()) @db.Uuid
  name       String      @unique
  address    String      @unique
  teachers   Teacher[]
  student    Student[]
  classrooms Classroom[]
}

model Classroom {
  id        String  @id @default(uuid()) @db.Uuid
  name      String
  available Boolean @default(true)
  capacity  Int

  centre   Centre @relation(fields: [centreId], references: [id])
  centreId String @db.Uuid

  sessions Session[]
}

enum PromotionStatus {
  ACTIVE
  INACTIVE
}

model Promotion {
  id                 String          @id @default(uuid()) @db.Uuid
  startDate          DateTime
  endDate            DateTime
  promoCode          String          @unique
  percentageDiscount Float
  description        String
  status             PromotionStatus @default(ACTIVE)

  transactions Transaction[]
}

model FaqTopic {
  id          String       @id @default(uuid()) @db.Uuid
  title       String       @unique
  faqArticles FaqArticle[]
}

model FaqArticle {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  imageUrl   String
  body       String
  faqTopic   FaqTopic @relation(fields: [faqTopicId], references: [id])
  faqTopicId String   @db.Uuid
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
  SUPER_ADMIN
}

model WhitelistItem {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique
  role  Role

  student Student?
  admin   Admin?
  teacher Teacher?
}

model Term {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  startDate DateTime
  endDate   DateTime

  transactions Transaction[]
}

enum TransactionType {
  PURCHASED
  DEDUCTED //attendance
  STRIPE_DEDUCTED //refunded transaction
  ROLLOVER
  VOID
}

model Transaction {
  id                String          @id @default(uuid()) @db.Uuid
  amount            Int?
  currency          String?
  dateTime          DateTime        @default(now()) @db.Timestamptz
  creditsTransacted Int
  transactionType   TransactionType
  reason            String?

  referenceId String?

  term   Term   @relation(fields: [termId], references: [id])
  termId String @db.Uuid

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid

  promotion   Promotion? @relation(fields: [promotionId], references: [id])
  promotionId String?    @db.Uuid

  creditBundleIdArray String[]

  stripeTransaction   StripeTransaction? @relation(fields: [stripeTransactionId], references: [id])
  stripeTransactionId String?            @db.Uuid

  attendance   Attendance? @relation(fields: [attendanceId], references: [id])
  attendanceId String?    @db.Uuid
}

enum StripeTransactionStatus {
  PROCESSING
  SUCCEEDED
  FAILED
  VOID
  REFUNDED
}

model StripeTransaction {
  id              String @id @default(uuid()) @db.Uuid
  paymentIntentId String @unique
  amount          Int
  currency        String

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  status StripeTransactionStatus @default(PROCESSING)

  receiptUrl String?
  chargeId   String? @unique

  transactions Transaction[]
}

model CreditBundle {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  numCredits  Int
  basePrice   Int
  isActive    Boolean   @default(true)
  level       LevelEnum
}

enum QuizQuestionDifficultyEnum {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum QuizQuestionTopicEnum {
  WHOLE_NUMBERS
  MONEY
  MEASUREMENT
  GEOMETRY
  DATA_REPRESENTATION_AND_INTERPRETATION
  FRACTIONS
  AREA_AND_VOLUME
  DECIMALS
  PERCENTAGE
  RATIO
  RATE_AND_SPEED
  DATA_ANALYSIS
  ALGEBRA
  NUMBERS_AND_OPERATIONS
  RATIO_AND_PROPORTION
  ALGEBRAIC_EXPRESSIONS_AND_FORMULAE
  FUNCTIONS_AND_GRAPHS
  EQUATIONS_AND_INEQUALITIES
  SET_LANGUAGE_AND_NOTATION
  MATRICES
  ANGLES_TRIANGLES_AND_POLYGONS
  CONGRUENCE_AND_SIMILARITY
  PROPERTIES_OF_CIRCLES
  PYTHAGORAS_THEOREM_AND_TRIGONOMETRY
  MENSURATION
  COORDINATE_GEOMETRY
  VECTORS_IN_2D
  DATA_HANDLING_AND_ANALYSIS
  PROBABILITY
  SEQUENCE_AND_SERIES
  VECTORS
  INTRODUCTION_TO_COMPLEX_NUMBERS
  CALCULUS
  PROBABILITY_AND_STATISTICS
}

enum QuizQuestionStatusEnum {
  READY
  DRAFT
  DISABLED
}

enum QuizQuestionTypeEnum {
  MCQ
  MRQ
  TFQ
  SHORT_ANSWER
}

model QuizQuestion {
  id            String                     @id @default(uuid()) @db.Uuid
  topics        QuizQuestionTopicEnum[]
  levels        LevelEnum[]
  difficulty    QuizQuestionDifficultyEnum
  questionText  String                     @db.Text
  status        QuizQuestionStatusEnum
  questionType  QuizQuestionTypeEnum
  answers       QuizAnswer[]
  createdAt     DateTime                   @default(now())
  nextVersion   QuizQuestion?              @relation("versioning", fields: [nextVersionId], references: [id])
  nextVersionId String?                    @unique @db.Uuid
  prevVersion   QuizQuestion?              @relation("versioning")
  version       Int                        @default(1)
  usedInQuizzes QuizOnQuizQuestions[]
  usedInTakes   TakeAnswer[]
}

model QuizAnswer {
  id          String        @id @default(uuid()) @db.Uuid
  answer      String        @db.Text
  explanation String?
  isCorrect   Boolean
  question    QuizQuestion? @relation(fields: [questionId], references: [id])
  questionId  String?       @db.Uuid
  createdAt   DateTime      @default(now())
}

model Session {
  id       String        @id @default(uuid()) @db.Uuid
  start    DateTime
  end      DateTime
  subjects SubjectEnum[]
  levels   LevelEnum[]

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @db.Uuid

  students Student[]

  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String    @db.Uuid

  class   Class?  @relation(fields: [classId], references: [id])
  classId String? @db.Uuid

  attendances Attendance[]
}

enum ClassFrequencyEnum {
  WEEKLY
  DAILY
  MONTHLY
}

model Class {
  id               String             @id @default(uuid()) @db.Uuid
  endRecurringDate DateTime
  frequency        ClassFrequencyEnum

  sessions Session[]
}

model Quiz {
  id                 String                     @id @default(uuid()) @db.Uuid
  title              String
  description        String                     @db.Text
  subject            SubjectEnum
  levels             LevelEnum[]
  difficulty         QuizQuestionDifficultyEnum
  topics             QuizQuestionTopicEnum[]
  totalMarks         Int
  rewardPoints       Int
  rewardMinimumMarks Int
  timeAllowed        Int?
  teacherCreated     Teacher                    @relation(fields: [teacherCreatedId], references: [id])
  teacherCreatedId   String                     @db.Uuid
  createdAt          DateTime                   @default(now())
  allocatedTo        Student[]
  isPublic           Boolean                    @default(true)
  quizQuestions      QuizOnQuizQuestions[]
  takes              Take[]
  nextVersion        Quiz?                      @relation("versioning", fields: [nextVersionId], references: [id])
  nextVersionId      String?                    @unique @db.Uuid
  prevVersion        Quiz?                      @relation("versioning")
  version            Int                        @default(1)
}

model QuizOnQuizQuestions {
  quizQuestion      QuizQuestion @relation(fields: [quizQuestionId], references: [id])
  quizQuestionId    String       @db.Uuid
  quiz              Quiz         @relation(fields: [quizId], references: [id])
  quizId            String       @db.Uuid
  quizQuestionIndex Int
  quizQuestionMarks Int          @default(1)

  @@id([quizId, quizQuestionId])
}

model Take {
  id             String       @id @default(uuid()) @db.Uuid
  marks          Int
  attemptedAt    DateTime     @default(now())
  timeTaken      Int
  takenBy        Student      @relation(fields: [takenById], references: [id])
  takenById      String       @db.Uuid
  quiz           Quiz         @relation(fields: [quizId], references: [id])
  quizId         String       @db.Uuid
  studentAnswers TakeAnswer[]
}

model TakeAnswer {
  id            String       @id @default(uuid()) @db.Uuid
  question      QuizQuestion @relation(fields: [questionId], references: [id])
  questionId    String       @db.Uuid
  studentAnswer String
  isCorrect     Boolean
  timeTaken     Int
  take          Take         @relation(fields: [takeId], references: [id])
  takeId        String       @db.Uuid
}

model Attendance {
  id String @id @default(uuid()) @db.Uuid
  hasAttended Boolean @default(true)

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String  @db.Uuid

  transactions Transaction[]
}
