// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StudentStatusEnum {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Student {
  id          String            @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  email       String            @unique
  password    String
  level       LevelEnum
  subjects    SubjectEnum[]
  status      StudentStatusEnum @default(ACTIVE)
  parents     Parent[]
  school      String
  phoneNumber String

  centre   Centre @relation(fields: [centreId], references: [id])
  centreId String @db.Uuid

  whitelistItem   WhitelistItem @relation(fields: [whitelistItemId], references: [id])
  whitelistItemId String        @unique @db.Uuid

  notificationPreference NotificationPreference?

  transaction Transaction[]
}

model Parent {
  id          String   @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  phoneNumber String
  Student     Student? @relation(fields: [studentId], references: [id])
  studentId   String?  @db.Uuid
}

enum AdminTypeEnum {
  STANDARD_ADMIN
  SUPER_ADMIN
}

model Admin {
  id        String        @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String        @unique
  password  String
  type      AdminTypeEnum @default(STANDARD_ADMIN)

  whitelistItem   WhitelistItem @relation(fields: [whitelistItemId], references: [id])
  whitelistItemId String        @unique @db.Uuid
}

enum SubjectEnum {
  MATHEMATICS
  ENGLISH
  SCIENCE
}

enum LevelEnum {
  P1
  P2
  P3
  P4
  P5
  P6
  S1
  S2
  S3
  S4
  S5
  J1
  J2
}

model Teacher {
  id        String        @id @default(uuid()) @db.Uuid
  email     String        @unique
  firstName String
  lastName  String
  password  String
  levels    LevelEnum[]
  subjects  SubjectEnum[]
  centre    Centre        @relation(fields: [centreId], references: [id])
  centreId  String        @db.Uuid
  // sessions Session[]
  // announcements Announcement[]
  // assignments Assignment[]
  // quizzes Quiz[]

  whitelistItem   WhitelistItem @relation(fields: [whitelistItemId], references: [id])
  whitelistItemId String        @unique @db.Uuid
}

model NotificationPreference {
  id             String        @id @default(uuid()) @db.Uuid
  isUnsubscribed Boolean
  subjectsPref   SubjectEnum[]
  levelsPref     LevelEnum[]
  teacherPref    String[]
  centrePref     String[]

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique @db.Uuid
}

model Centre {
  id         String      @id @default(uuid()) @db.Uuid
  name       String      @unique
  address    String      @unique
  teachers   Teacher[]
  student    Student[]
  classrooms Classroom[]
}

model Classroom {
  id        String  @id @default(uuid()) @db.Uuid
  name      String
  available Boolean @default(true)
  capacity  Int
  centre    Centre  @relation(fields: [centreId], references: [id])
  centreId  String  @db.Uuid
  // sessions Session[]
}

enum PromotionStatus {
  ACTIVE
  INACTIVE
}

model Promotion {
  id                 String          @id @default(uuid()) @db.Uuid
  startDate          DateTime
  endDate            DateTime
  promoCode          String          @unique
  percentageDiscount Float
  description        String
  status             PromotionStatus @default(ACTIVE)

  transactions Transaction[]
}

model FaqTopic {
  id          String       @id @default(uuid()) @db.Uuid
  title       String       @unique
  faqArticles FaqArticle[]
}

model FaqArticle {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  imageUrl   String
  body       String
  faqTopic   FaqTopic @relation(fields: [faqTopicId], references: [id])
  faqTopicId String   @db.Uuid
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
  SUPER_ADMIN
}

model WhitelistItem {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique
  role  Role

  student Student?
  admin   Admin?
  teacher Teacher?
}

model Term {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  startDate DateTime
  endDate   DateTime

  transactions Transaction[]
}

enum TransactionType {
  PURCHASED
  DEDUCTED
  REFUNDED
  VOID
}

model Transaction {
  id                String          @id @default(uuid()) @db.Uuid
  amount            Float?
  currency          String?
  dateTime          DateTime        @default(now()) @db.Timestamptz
  creditsTransacted Int
  transactionType   TransactionType
  reason            String?

  referenceId String?

  term   Term   @relation(fields: [termId], references: [id])
  termId String @db.Uuid

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid

  promotion   Promotion? @relation(fields: [promotionId], references: [id])
  promotionId String?    @db.Uuid

  //stripeTransaction StripeTransaction? 

  //creditBundle CreditBundle @relation(fields: [creditBundleId], references: [id])
  //creditBundleId @db.Uuid
}

enum QuizQuestionDifficultyEnum {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum QuizQuestionTopicEnum {
  WHOLE_NUMBERS
  MONEY
  MEASUREMENT
  GEOMETRY
  DATA_REPRESENTATION_AND_INTERPRETATION
  FRACTIONS
  AREA_AND_VOLUME
  DECIMALS
  PERCENTAGE
  RATIO
  RATE_AND_SPEED
  DATA_ANALYSIS
  ALGEBRA
  NUMBERS_AND_OPERATIONS
  RATIO_AND_PROPORTION
  ALGEBRAIC_EXPRESSIONS_AND_FORMULAE
  FUNCTIONS_AND_GRAPHS
  EQUATIONS_AND_INEQUALITIES
  SET_LANGUAGE_AND_NOTATION
  MATRICES
  ANGLES_TRIANGLES_AND_POLYGONS
  CONGRUENCE_AND_SIMILARITY
  PROPERTIES_OF_CIRCLES
  PYTHAGORAS_THEOREM_AND_TRIGONOMETRY
  MENSURATION
  COORDINATE_GEOMETRY
  VECTORS_IN_2D
  DATA_HANDLING_AND_ANALYSIS
  PROBABILITY
  SEQUENCE_AND_SERIES
  VECTORS
  INTRODUCTION_TO_COMPLEX_NUMBERS
  CALCULUS
  PROBABILITY_AND_STATISTICS
}

enum QuizQuestionStatusEnum {
  READY
  DRAFT
  DISABLED
}

enum QuizQuestionTypeEnum {
  MCQ
  MRQ
  TFQ
  OPEN_ENDED
}

model QuizQuestion {
  id           String                     @id @default(uuid()) @db.Uuid
  topics       QuizQuestionTopicEnum[]
  levels       LevelEnum[]
  difficulty   QuizQuestionDifficultyEnum
  questionText String                     @db.Text
  status       QuizQuestionStatusEnum
  questionType QuizQuestionTypeEnum
  options      String[]
  answers      QuizAnswer[]
}

model QuizAnswer {
  id          String        @id @default(uuid()) @db.Uuid
  answer      String        @db.Text
  explanation String?
  question    QuizQuestion? @relation(fields: [questionId], references: [id])
  questionId  String?       @db.Uuid
}
